# source: http://localhost:8080/v1alpha1/graphql
# timestamp: Sun Feb 24 2019 15:05:07 GMT+0100 (Central European Standard Time)

schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""conflict action"""
enum conflict_action {
  """ignore the insert on this row"""
  ignore

  """update the row with the given values"""
  update
}

scalar date

"""
expression to compare columns of type date. All fields are combined with logical 'AND'.
"""
input date_comparison_exp {
  _eq: date
  _gt: date
  _gte: date
  _in: [date]
  _is_null: Boolean
  _lt: date
  _lte: date
  _neq: date
  _nin: [date]
}

"""
expression to compare columns of type integer. All fields are combined with logical 'AND'.
"""
input integer_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int]
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "places"
  """
  delete_places(
    """filter the rows which have to be deleted"""
    where: places_bool_exp!
  ): places_mutation_response

  """
  delete data from the table: "things"
  """
  delete_things(
    """filter the rows which have to be deleted"""
    where: things_bool_exp!
  ): things_mutation_response

  """
  insert data into the table: "places"
  """
  insert_places(
    """the rows to be inserted"""
    objects: [places_insert_input!]!

    """on conflict condition"""
    on_conflict: places_on_conflict
  ): places_mutation_response

  """
  insert data into the table: "things"
  """
  insert_things(
    """the rows to be inserted"""
    objects: [things_insert_input!]!

    """on conflict condition"""
    on_conflict: things_on_conflict
  ): things_mutation_response

  """
  update data of the table: "places"
  """
  update_places(
    """
    increments the integer columns with given value of the filtered values
    """
    _inc: places_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: places_set_input

    """filter the rows which have to be updated"""
    where: places_bool_exp!
  ): places_mutation_response

  """
  update data of the table: "things"
  """
  update_things(
    """
    increments the integer columns with given value of the filtered values
    """
    _inc: things_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: things_set_input

    """filter the rows which have to be updated"""
    where: things_bool_exp!
  ): things_mutation_response
}

"""column ordering options"""
enum order_by {
  """in the ascending order, nulls last"""
  asc

  """in the ascending order, nulls first"""
  asc_nulls_first

  """in the ascending order, nulls last"""
  asc_nulls_last

  """in the descending order, nulls first"""
  desc

  """in the descending order, nulls first"""
  desc_nulls_first

  """in the descending order, nulls last"""
  desc_nulls_last
}

"""
columns and relationships of "places"
"""
type places {
  id: Int!
  name: String!

  """An array relationship"""
  things(
    """distinct select on columns"""
    distinct_on: [things_select_column!]

    """limit the nuber of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [things_order_by!]

    """filter the rows returned"""
    where: things_bool_exp
  ): [things!]!

  """An aggregated array relationship"""
  things_aggregate(
    """distinct select on columns"""
    distinct_on: [things_select_column!]

    """limit the nuber of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [things_order_by!]

    """filter the rows returned"""
    where: things_bool_exp
  ): things_aggregate!
}

"""
aggregated selection of "places"
"""
type places_aggregate {
  aggregate: places_aggregate_fields
  nodes: [places!]!
}

"""
aggregate fields of "places"
"""
type places_aggregate_fields {
  avg: places_avg_fields
  count(columns: [places_select_column!], distinct: Boolean): Int
  max: places_max_fields
  min: places_min_fields
  stddev: places_stddev_fields
  stddev_pop: places_stddev_pop_fields
  stddev_samp: places_stddev_samp_fields
  sum: places_sum_fields
  var_pop: places_var_pop_fields
  var_samp: places_var_samp_fields
  variance: places_variance_fields
}

"""
order by aggregate values of table "places"
"""
input places_aggregate_order_by {
  avg: places_avg_order_by
  count: order_by
  max: places_max_order_by
  min: places_min_order_by
  stddev: places_stddev_order_by
  stddev_pop: places_stddev_pop_order_by
  stddev_samp: places_stddev_samp_order_by
  sum: places_sum_order_by
  var_pop: places_var_pop_order_by
  var_samp: places_var_samp_order_by
  variance: places_variance_order_by
}

"""
input type for inserting array relation for remote table "places"
"""
input places_arr_rel_insert_input {
  data: [places_insert_input!]!
  on_conflict: places_on_conflict
}

"""aggregate avg on columns"""
type places_avg_fields {
  id: Float
}

"""
order by avg() on columns of table "places"
"""
input places_avg_order_by {
  id: order_by
}

"""
Boolean expression to filter rows from the table "places". All fields are combined with a logical 'AND'.
"""
input places_bool_exp {
  _and: [places_bool_exp]
  _not: places_bool_exp
  _or: [places_bool_exp]
  id: integer_comparison_exp
  name: text_comparison_exp
  things: things_bool_exp
}

"""
unique or primary key constraints on table "places"
"""
enum places_constraint {
  """unique or primary key constraint"""
  places_pkey
}

"""
input type for incrementing integer columne in table "places"
"""
input places_inc_input {
  id: Int
}

"""
input type for inserting data into table "places"
"""
input places_insert_input {
  id: Int
  name: String
  things: things_arr_rel_insert_input
}

"""aggregate max on columns"""
type places_max_fields {
  id: Int
  name: String
}

"""
order by max() on columns of table "places"
"""
input places_max_order_by {
  id: order_by
  name: order_by
}

"""aggregate min on columns"""
type places_min_fields {
  id: Int
  name: String
}

"""
order by min() on columns of table "places"
"""
input places_min_order_by {
  id: order_by
  name: order_by
}

"""
response of any mutation on the table "places"
"""
type places_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [places!]!
}

"""
input type for inserting object relation for remote table "places"
"""
input places_obj_rel_insert_input {
  data: places_insert_input!
  on_conflict: places_on_conflict
}

"""
on conflict condition type for table "places"
"""
input places_on_conflict {
  constraint: places_constraint!
  update_columns: [places_update_column!]!
}

"""
ordering options when selecting data from "places"
"""
input places_order_by {
  id: order_by
  name: order_by
  things_aggregate: things_aggregate_order_by
}

"""
select columns of table "places"
"""
enum places_select_column {
  """column name"""
  id

  """column name"""
  name
}

"""
input type for updating data in table "places"
"""
input places_set_input {
  id: Int
  name: String
}

"""aggregate stddev on columns"""
type places_stddev_fields {
  id: Float
}

"""
order by stddev() on columns of table "places"
"""
input places_stddev_order_by {
  id: order_by
}

"""aggregate stddev_pop on columns"""
type places_stddev_pop_fields {
  id: Float
}

"""
order by stddev_pop() on columns of table "places"
"""
input places_stddev_pop_order_by {
  id: order_by
}

"""aggregate stddev_samp on columns"""
type places_stddev_samp_fields {
  id: Float
}

"""
order by stddev_samp() on columns of table "places"
"""
input places_stddev_samp_order_by {
  id: order_by
}

"""aggregate sum on columns"""
type places_sum_fields {
  id: Int
}

"""
order by sum() on columns of table "places"
"""
input places_sum_order_by {
  id: order_by
}

"""
update columns of table "places"
"""
enum places_update_column {
  """column name"""
  id

  """column name"""
  name
}

"""aggregate var_pop on columns"""
type places_var_pop_fields {
  id: Float
}

"""
order by var_pop() on columns of table "places"
"""
input places_var_pop_order_by {
  id: order_by
}

"""aggregate var_samp on columns"""
type places_var_samp_fields {
  id: Float
}

"""
order by var_samp() on columns of table "places"
"""
input places_var_samp_order_by {
  id: order_by
}

"""aggregate variance on columns"""
type places_variance_fields {
  id: Float
}

"""
order by variance() on columns of table "places"
"""
input places_variance_order_by {
  id: order_by
}

"""query root"""
type query_root {
  """
  fetch data from the table: "places"
  """
  places(
    """distinct select on columns"""
    distinct_on: [places_select_column!]

    """limit the nuber of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [places_order_by!]

    """filter the rows returned"""
    where: places_bool_exp
  ): [places!]!

  """
  fetch aggregated fields from the table: "places"
  """
  places_aggregate(
    """distinct select on columns"""
    distinct_on: [places_select_column!]

    """limit the nuber of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [places_order_by!]

    """filter the rows returned"""
    where: places_bool_exp
  ): places_aggregate!

  """fetch data from the table: "places" using primary key columns"""
  places_by_pk(id: Int!): places

  """
  fetch data from the table: "things"
  """
  things(
    """distinct select on columns"""
    distinct_on: [things_select_column!]

    """limit the nuber of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [things_order_by!]

    """filter the rows returned"""
    where: things_bool_exp
  ): [things!]!

  """
  fetch aggregated fields from the table: "things"
  """
  things_aggregate(
    """distinct select on columns"""
    distinct_on: [things_select_column!]

    """limit the nuber of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [things_order_by!]

    """filter the rows returned"""
    where: things_bool_exp
  ): things_aggregate!

  """fetch data from the table: "things" using primary key columns"""
  things_by_pk(id: uuid!): things
}

"""subscription root"""
type subscription_root {
  """
  fetch data from the table: "places"
  """
  places(
    """distinct select on columns"""
    distinct_on: [places_select_column!]

    """limit the nuber of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [places_order_by!]

    """filter the rows returned"""
    where: places_bool_exp
  ): [places!]!

  """
  fetch aggregated fields from the table: "places"
  """
  places_aggregate(
    """distinct select on columns"""
    distinct_on: [places_select_column!]

    """limit the nuber of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [places_order_by!]

    """filter the rows returned"""
    where: places_bool_exp
  ): places_aggregate!

  """fetch data from the table: "places" using primary key columns"""
  places_by_pk(id: Int!): places

  """
  fetch data from the table: "things"
  """
  things(
    """distinct select on columns"""
    distinct_on: [things_select_column!]

    """limit the nuber of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [things_order_by!]

    """filter the rows returned"""
    where: things_bool_exp
  ): [things!]!

  """
  fetch aggregated fields from the table: "things"
  """
  things_aggregate(
    """distinct select on columns"""
    distinct_on: [things_select_column!]

    """limit the nuber of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [things_order_by!]

    """filter the rows returned"""
    where: things_bool_exp
  ): things_aggregate!

  """fetch data from the table: "things" using primary key columns"""
  things_by_pk(id: uuid!): things
}

"""
expression to compare columns of type text. All fields are combined with logical 'AND'.
"""
input text_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  _ilike: String
  _in: [String]
  _is_null: Boolean
  _like: String
  _lt: String
  _lte: String
  _neq: String
  _nilike: String
  _nin: [String]
  _nlike: String
  _nsimilar: String
  _similar: String
}

"""
columns and relationships of "things"
"""
type things {
  date_added: date!
  id: uuid!
  name: String!

  """An object relationship"""
  place: places
  place_id: Int
}

"""
aggregated selection of "things"
"""
type things_aggregate {
  aggregate: things_aggregate_fields
  nodes: [things!]!
}

"""
aggregate fields of "things"
"""
type things_aggregate_fields {
  avg: things_avg_fields
  count(columns: [things_select_column!], distinct: Boolean): Int
  max: things_max_fields
  min: things_min_fields
  stddev: things_stddev_fields
  stddev_pop: things_stddev_pop_fields
  stddev_samp: things_stddev_samp_fields
  sum: things_sum_fields
  var_pop: things_var_pop_fields
  var_samp: things_var_samp_fields
  variance: things_variance_fields
}

"""
order by aggregate values of table "things"
"""
input things_aggregate_order_by {
  avg: things_avg_order_by
  count: order_by
  max: things_max_order_by
  min: things_min_order_by
  stddev: things_stddev_order_by
  stddev_pop: things_stddev_pop_order_by
  stddev_samp: things_stddev_samp_order_by
  sum: things_sum_order_by
  var_pop: things_var_pop_order_by
  var_samp: things_var_samp_order_by
  variance: things_variance_order_by
}

"""
input type for inserting array relation for remote table "things"
"""
input things_arr_rel_insert_input {
  data: [things_insert_input!]!
  on_conflict: things_on_conflict
}

"""aggregate avg on columns"""
type things_avg_fields {
  place_id: Float
}

"""
order by avg() on columns of table "things"
"""
input things_avg_order_by {
  place_id: order_by
}

"""
Boolean expression to filter rows from the table "things". All fields are combined with a logical 'AND'.
"""
input things_bool_exp {
  _and: [things_bool_exp]
  _not: things_bool_exp
  _or: [things_bool_exp]
  date_added: date_comparison_exp
  id: uuid_comparison_exp
  name: text_comparison_exp
  place: places_bool_exp
  place_id: integer_comparison_exp
}

"""
unique or primary key constraints on table "things"
"""
enum things_constraint {
  """unique or primary key constraint"""
  things_pkey
}

"""
input type for incrementing integer columne in table "things"
"""
input things_inc_input {
  place_id: Int
}

"""
input type for inserting data into table "things"
"""
input things_insert_input {
  date_added: date
  id: uuid
  name: String
  place: places_obj_rel_insert_input
  place_id: Int
}

"""aggregate max on columns"""
type things_max_fields {
  date_added: date
  name: String
  place_id: Int
}

"""
order by max() on columns of table "things"
"""
input things_max_order_by {
  date_added: order_by
  name: order_by
  place_id: order_by
}

"""aggregate min on columns"""
type things_min_fields {
  date_added: date
  name: String
  place_id: Int
}

"""
order by min() on columns of table "things"
"""
input things_min_order_by {
  date_added: order_by
  name: order_by
  place_id: order_by
}

"""
response of any mutation on the table "things"
"""
type things_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [things!]!
}

"""
input type for inserting object relation for remote table "things"
"""
input things_obj_rel_insert_input {
  data: things_insert_input!
  on_conflict: things_on_conflict
}

"""
on conflict condition type for table "things"
"""
input things_on_conflict {
  constraint: things_constraint!
  update_columns: [things_update_column!]!
}

"""
ordering options when selecting data from "things"
"""
input things_order_by {
  date_added: order_by
  id: order_by
  name: order_by
  place: places_order_by
  place_id: order_by
}

"""
select columns of table "things"
"""
enum things_select_column {
  """column name"""
  date_added

  """column name"""
  id

  """column name"""
  name

  """column name"""
  place_id
}

"""
input type for updating data in table "things"
"""
input things_set_input {
  date_added: date
  id: uuid
  name: String
  place_id: Int
}

"""aggregate stddev on columns"""
type things_stddev_fields {
  place_id: Float
}

"""
order by stddev() on columns of table "things"
"""
input things_stddev_order_by {
  place_id: order_by
}

"""aggregate stddev_pop on columns"""
type things_stddev_pop_fields {
  place_id: Float
}

"""
order by stddev_pop() on columns of table "things"
"""
input things_stddev_pop_order_by {
  place_id: order_by
}

"""aggregate stddev_samp on columns"""
type things_stddev_samp_fields {
  place_id: Float
}

"""
order by stddev_samp() on columns of table "things"
"""
input things_stddev_samp_order_by {
  place_id: order_by
}

"""aggregate sum on columns"""
type things_sum_fields {
  place_id: Int
}

"""
order by sum() on columns of table "things"
"""
input things_sum_order_by {
  place_id: order_by
}

"""
update columns of table "things"
"""
enum things_update_column {
  """column name"""
  date_added

  """column name"""
  id

  """column name"""
  name

  """column name"""
  place_id
}

"""aggregate var_pop on columns"""
type things_var_pop_fields {
  place_id: Float
}

"""
order by var_pop() on columns of table "things"
"""
input things_var_pop_order_by {
  place_id: order_by
}

"""aggregate var_samp on columns"""
type things_var_samp_fields {
  place_id: Float
}

"""
order by var_samp() on columns of table "things"
"""
input things_var_samp_order_by {
  place_id: order_by
}

"""aggregate variance on columns"""
type things_variance_fields {
  place_id: Float
}

"""
order by variance() on columns of table "things"
"""
input things_variance_order_by {
  place_id: order_by
}

scalar uuid

"""
expression to compare columns of type uuid. All fields are combined with logical 'AND'.
"""
input uuid_comparison_exp {
  _eq: uuid
  _gt: uuid
  _gte: uuid
  _in: [uuid]
  _is_null: Boolean
  _lt: uuid
  _lte: uuid
  _neq: uuid
  _nin: [uuid]
}
