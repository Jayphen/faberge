// Code generated by Prisma (prisma@1.29.0-beta.9). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  place: (where?: PlaceWhereInput) => Promise<boolean>;
  thing: (where?: ThingWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  place: (where: PlaceWhereUniqueInput) => PlacePromise;
  places: (
    args?: {
      where?: PlaceWhereInput;
      orderBy?: PlaceOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Place>;
  placesConnection: (
    args?: {
      where?: PlaceWhereInput;
      orderBy?: PlaceOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => PlaceConnectionPromise;
  thing: (where: ThingWhereUniqueInput) => ThingPromise;
  things: (
    args?: {
      where?: ThingWhereInput;
      orderBy?: ThingOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Thing>;
  thingsConnection: (
    args?: {
      where?: ThingWhereInput;
      orderBy?: ThingOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ThingConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createPlace: (data: PlaceCreateInput) => PlacePromise;
  updatePlace: (
    args: { data: PlaceUpdateInput; where: PlaceWhereUniqueInput }
  ) => PlacePromise;
  updateManyPlaces: (
    args: { data: PlaceUpdateManyMutationInput; where?: PlaceWhereInput }
  ) => BatchPayloadPromise;
  upsertPlace: (
    args: {
      where: PlaceWhereUniqueInput;
      create: PlaceCreateInput;
      update: PlaceUpdateInput;
    }
  ) => PlacePromise;
  deletePlace: (where: PlaceWhereUniqueInput) => PlacePromise;
  deleteManyPlaces: (where?: PlaceWhereInput) => BatchPayloadPromise;
  createThing: (data: ThingCreateInput) => ThingPromise;
  updateThing: (
    args: { data: ThingUpdateInput; where: ThingWhereUniqueInput }
  ) => ThingPromise;
  updateManyThings: (
    args: { data: ThingUpdateManyMutationInput; where?: ThingWhereInput }
  ) => BatchPayloadPromise;
  upsertThing: (
    args: {
      where: ThingWhereUniqueInput;
      create: ThingCreateInput;
      update: ThingUpdateInput;
    }
  ) => ThingPromise;
  deleteThing: (where: ThingWhereUniqueInput) => ThingPromise;
  deleteManyThings: (where?: ThingWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  place: (
    where?: PlaceSubscriptionWhereInput
  ) => PlaceSubscriptionPayloadSubscription;
  thing: (
    where?: ThingSubscriptionWhereInput
  ) => ThingSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type ThingOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type PlaceOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "depth_ASC"
  | "depth_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type PlaceWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface ThingWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  place?: PlaceWhereInput;
  AND?: ThingWhereInput[] | ThingWhereInput;
  OR?: ThingWhereInput[] | ThingWhereInput;
  NOT?: ThingWhereInput[] | ThingWhereInput;
}

export interface PlaceWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  things_every?: ThingWhereInput;
  things_some?: ThingWhereInput;
  things_none?: ThingWhereInput;
  subPlaces_every?: PlaceWhereInput;
  subPlaces_some?: PlaceWhereInput;
  subPlaces_none?: PlaceWhereInput;
  depth?: Int;
  depth_not?: Int;
  depth_in?: Int[] | Int;
  depth_not_in?: Int[] | Int;
  depth_lt?: Int;
  depth_lte?: Int;
  depth_gt?: Int;
  depth_gte?: Int;
  parentPlace?: PlaceWhereInput;
  AND?: PlaceWhereInput[] | PlaceWhereInput;
  OR?: PlaceWhereInput[] | PlaceWhereInput;
  NOT?: PlaceWhereInput[] | PlaceWhereInput;
}

export type ThingWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface PlaceCreateInput {
  name: String;
  things?: ThingCreateManyWithoutPlaceInput;
  subPlaces?: PlaceCreateManyWithoutParentPlaceInput;
  depth: Int;
  parentPlace?: PlaceCreateOneWithoutSubPlacesInput;
}

export interface ThingCreateManyWithoutPlaceInput {
  create?: ThingCreateWithoutPlaceInput[] | ThingCreateWithoutPlaceInput;
  connect?: ThingWhereUniqueInput[] | ThingWhereUniqueInput;
}

export interface ThingCreateWithoutPlaceInput {
  name: String;
}

export interface PlaceCreateManyWithoutParentPlaceInput {
  create?:
    | PlaceCreateWithoutParentPlaceInput[]
    | PlaceCreateWithoutParentPlaceInput;
  connect?: PlaceWhereUniqueInput[] | PlaceWhereUniqueInput;
}

export interface PlaceCreateWithoutParentPlaceInput {
  name: String;
  things?: ThingCreateManyWithoutPlaceInput;
  subPlaces?: PlaceCreateManyWithoutParentPlaceInput;
  depth: Int;
}

export interface PlaceCreateOneWithoutSubPlacesInput {
  create?: PlaceCreateWithoutSubPlacesInput;
  connect?: PlaceWhereUniqueInput;
}

export interface PlaceCreateWithoutSubPlacesInput {
  name: String;
  things?: ThingCreateManyWithoutPlaceInput;
  depth: Int;
  parentPlace?: PlaceCreateOneWithoutSubPlacesInput;
}

export interface PlaceUpdateInput {
  name?: String;
  things?: ThingUpdateManyWithoutPlaceInput;
  subPlaces?: PlaceUpdateManyWithoutParentPlaceInput;
  depth?: Int;
  parentPlace?: PlaceUpdateOneWithoutSubPlacesInput;
}

export interface ThingUpdateManyWithoutPlaceInput {
  create?: ThingCreateWithoutPlaceInput[] | ThingCreateWithoutPlaceInput;
  delete?: ThingWhereUniqueInput[] | ThingWhereUniqueInput;
  connect?: ThingWhereUniqueInput[] | ThingWhereUniqueInput;
  set?: ThingWhereUniqueInput[] | ThingWhereUniqueInput;
  disconnect?: ThingWhereUniqueInput[] | ThingWhereUniqueInput;
  update?:
    | ThingUpdateWithWhereUniqueWithoutPlaceInput[]
    | ThingUpdateWithWhereUniqueWithoutPlaceInput;
  upsert?:
    | ThingUpsertWithWhereUniqueWithoutPlaceInput[]
    | ThingUpsertWithWhereUniqueWithoutPlaceInput;
  deleteMany?: ThingScalarWhereInput[] | ThingScalarWhereInput;
  updateMany?:
    | ThingUpdateManyWithWhereNestedInput[]
    | ThingUpdateManyWithWhereNestedInput;
}

export interface ThingUpdateWithWhereUniqueWithoutPlaceInput {
  where: ThingWhereUniqueInput;
  data: ThingUpdateWithoutPlaceDataInput;
}

export interface ThingUpdateWithoutPlaceDataInput {
  name?: String;
}

export interface ThingUpsertWithWhereUniqueWithoutPlaceInput {
  where: ThingWhereUniqueInput;
  update: ThingUpdateWithoutPlaceDataInput;
  create: ThingCreateWithoutPlaceInput;
}

export interface ThingScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  AND?: ThingScalarWhereInput[] | ThingScalarWhereInput;
  OR?: ThingScalarWhereInput[] | ThingScalarWhereInput;
  NOT?: ThingScalarWhereInput[] | ThingScalarWhereInput;
}

export interface ThingUpdateManyWithWhereNestedInput {
  where: ThingScalarWhereInput;
  data: ThingUpdateManyDataInput;
}

export interface ThingUpdateManyDataInput {
  name?: String;
}

export interface PlaceUpdateManyWithoutParentPlaceInput {
  create?:
    | PlaceCreateWithoutParentPlaceInput[]
    | PlaceCreateWithoutParentPlaceInput;
  delete?: PlaceWhereUniqueInput[] | PlaceWhereUniqueInput;
  connect?: PlaceWhereUniqueInput[] | PlaceWhereUniqueInput;
  set?: PlaceWhereUniqueInput[] | PlaceWhereUniqueInput;
  disconnect?: PlaceWhereUniqueInput[] | PlaceWhereUniqueInput;
  update?:
    | PlaceUpdateWithWhereUniqueWithoutParentPlaceInput[]
    | PlaceUpdateWithWhereUniqueWithoutParentPlaceInput;
  upsert?:
    | PlaceUpsertWithWhereUniqueWithoutParentPlaceInput[]
    | PlaceUpsertWithWhereUniqueWithoutParentPlaceInput;
  deleteMany?: PlaceScalarWhereInput[] | PlaceScalarWhereInput;
  updateMany?:
    | PlaceUpdateManyWithWhereNestedInput[]
    | PlaceUpdateManyWithWhereNestedInput;
}

export interface PlaceUpdateWithWhereUniqueWithoutParentPlaceInput {
  where: PlaceWhereUniqueInput;
  data: PlaceUpdateWithoutParentPlaceDataInput;
}

export interface PlaceUpdateWithoutParentPlaceDataInput {
  name?: String;
  things?: ThingUpdateManyWithoutPlaceInput;
  subPlaces?: PlaceUpdateManyWithoutParentPlaceInput;
  depth?: Int;
}

export interface PlaceUpsertWithWhereUniqueWithoutParentPlaceInput {
  where: PlaceWhereUniqueInput;
  update: PlaceUpdateWithoutParentPlaceDataInput;
  create: PlaceCreateWithoutParentPlaceInput;
}

export interface PlaceScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  depth?: Int;
  depth_not?: Int;
  depth_in?: Int[] | Int;
  depth_not_in?: Int[] | Int;
  depth_lt?: Int;
  depth_lte?: Int;
  depth_gt?: Int;
  depth_gte?: Int;
  AND?: PlaceScalarWhereInput[] | PlaceScalarWhereInput;
  OR?: PlaceScalarWhereInput[] | PlaceScalarWhereInput;
  NOT?: PlaceScalarWhereInput[] | PlaceScalarWhereInput;
}

export interface PlaceUpdateManyWithWhereNestedInput {
  where: PlaceScalarWhereInput;
  data: PlaceUpdateManyDataInput;
}

export interface PlaceUpdateManyDataInput {
  name?: String;
  depth?: Int;
}

export interface PlaceUpdateOneWithoutSubPlacesInput {
  create?: PlaceCreateWithoutSubPlacesInput;
  update?: PlaceUpdateWithoutSubPlacesDataInput;
  upsert?: PlaceUpsertWithoutSubPlacesInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: PlaceWhereUniqueInput;
}

export interface PlaceUpdateWithoutSubPlacesDataInput {
  name?: String;
  things?: ThingUpdateManyWithoutPlaceInput;
  depth?: Int;
  parentPlace?: PlaceUpdateOneWithoutSubPlacesInput;
}

export interface PlaceUpsertWithoutSubPlacesInput {
  update: PlaceUpdateWithoutSubPlacesDataInput;
  create: PlaceCreateWithoutSubPlacesInput;
}

export interface PlaceUpdateManyMutationInput {
  name?: String;
  depth?: Int;
}

export interface ThingCreateInput {
  name: String;
  place: PlaceCreateOneWithoutThingsInput;
}

export interface PlaceCreateOneWithoutThingsInput {
  create?: PlaceCreateWithoutThingsInput;
  connect?: PlaceWhereUniqueInput;
}

export interface PlaceCreateWithoutThingsInput {
  name: String;
  subPlaces?: PlaceCreateManyWithoutParentPlaceInput;
  depth: Int;
  parentPlace?: PlaceCreateOneWithoutSubPlacesInput;
}

export interface ThingUpdateInput {
  name?: String;
  place?: PlaceUpdateOneRequiredWithoutThingsInput;
}

export interface PlaceUpdateOneRequiredWithoutThingsInput {
  create?: PlaceCreateWithoutThingsInput;
  update?: PlaceUpdateWithoutThingsDataInput;
  upsert?: PlaceUpsertWithoutThingsInput;
  connect?: PlaceWhereUniqueInput;
}

export interface PlaceUpdateWithoutThingsDataInput {
  name?: String;
  subPlaces?: PlaceUpdateManyWithoutParentPlaceInput;
  depth?: Int;
  parentPlace?: PlaceUpdateOneWithoutSubPlacesInput;
}

export interface PlaceUpsertWithoutThingsInput {
  update: PlaceUpdateWithoutThingsDataInput;
  create: PlaceCreateWithoutThingsInput;
}

export interface ThingUpdateManyMutationInput {
  name?: String;
}

export interface PlaceSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: PlaceWhereInput;
  AND?: PlaceSubscriptionWhereInput[] | PlaceSubscriptionWhereInput;
  OR?: PlaceSubscriptionWhereInput[] | PlaceSubscriptionWhereInput;
  NOT?: PlaceSubscriptionWhereInput[] | PlaceSubscriptionWhereInput;
}

export interface ThingSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ThingWhereInput;
  AND?: ThingSubscriptionWhereInput[] | ThingSubscriptionWhereInput;
  OR?: ThingSubscriptionWhereInput[] | ThingSubscriptionWhereInput;
  NOT?: ThingSubscriptionWhereInput[] | ThingSubscriptionWhereInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Place {
  id: ID_Output;
  name: String;
  depth: Int;
}

export interface PlacePromise extends Promise<Place>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  things: <T = FragmentableArray<Thing>>(
    args?: {
      where?: ThingWhereInput;
      orderBy?: ThingOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  subPlaces: <T = FragmentableArray<Place>>(
    args?: {
      where?: PlaceWhereInput;
      orderBy?: PlaceOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  depth: () => Promise<Int>;
  parentPlace: <T = PlacePromise>() => T;
}

export interface PlaceSubscription
  extends Promise<AsyncIterator<Place>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  things: <T = Promise<AsyncIterator<ThingSubscription>>>(
    args?: {
      where?: ThingWhereInput;
      orderBy?: ThingOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  subPlaces: <T = Promise<AsyncIterator<PlaceSubscription>>>(
    args?: {
      where?: PlaceWhereInput;
      orderBy?: PlaceOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  depth: () => Promise<AsyncIterator<Int>>;
  parentPlace: <T = PlaceSubscription>() => T;
}

export interface Thing {
  id: ID_Output;
  name: String;
}

export interface ThingPromise extends Promise<Thing>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  place: <T = PlacePromise>() => T;
}

export interface ThingSubscription
  extends Promise<AsyncIterator<Thing>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  place: <T = PlaceSubscription>() => T;
}

export interface PlaceConnection {
  pageInfo: PageInfo;
  edges: PlaceEdge[];
}

export interface PlaceConnectionPromise
  extends Promise<PlaceConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PlaceEdge>>() => T;
  aggregate: <T = AggregatePlacePromise>() => T;
}

export interface PlaceConnectionSubscription
  extends Promise<AsyncIterator<PlaceConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PlaceEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePlaceSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface PlaceEdge {
  node: Place;
  cursor: String;
}

export interface PlaceEdgePromise extends Promise<PlaceEdge>, Fragmentable {
  node: <T = PlacePromise>() => T;
  cursor: () => Promise<String>;
}

export interface PlaceEdgeSubscription
  extends Promise<AsyncIterator<PlaceEdge>>,
    Fragmentable {
  node: <T = PlaceSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePlace {
  count: Int;
}

export interface AggregatePlacePromise
  extends Promise<AggregatePlace>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePlaceSubscription
  extends Promise<AsyncIterator<AggregatePlace>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ThingConnection {
  pageInfo: PageInfo;
  edges: ThingEdge[];
}

export interface ThingConnectionPromise
  extends Promise<ThingConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ThingEdge>>() => T;
  aggregate: <T = AggregateThingPromise>() => T;
}

export interface ThingConnectionSubscription
  extends Promise<AsyncIterator<ThingConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ThingEdgeSubscription>>>() => T;
  aggregate: <T = AggregateThingSubscription>() => T;
}

export interface ThingEdge {
  node: Thing;
  cursor: String;
}

export interface ThingEdgePromise extends Promise<ThingEdge>, Fragmentable {
  node: <T = ThingPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ThingEdgeSubscription
  extends Promise<AsyncIterator<ThingEdge>>,
    Fragmentable {
  node: <T = ThingSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateThing {
  count: Int;
}

export interface AggregateThingPromise
  extends Promise<AggregateThing>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateThingSubscription
  extends Promise<AsyncIterator<AggregateThing>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface PlaceSubscriptionPayload {
  mutation: MutationType;
  node: Place;
  updatedFields: String[];
  previousValues: PlacePreviousValues;
}

export interface PlaceSubscriptionPayloadPromise
  extends Promise<PlaceSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PlacePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PlacePreviousValuesPromise>() => T;
}

export interface PlaceSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PlaceSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PlaceSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PlacePreviousValuesSubscription>() => T;
}

export interface PlacePreviousValues {
  id: ID_Output;
  name: String;
  depth: Int;
}

export interface PlacePreviousValuesPromise
  extends Promise<PlacePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  depth: () => Promise<Int>;
}

export interface PlacePreviousValuesSubscription
  extends Promise<AsyncIterator<PlacePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  depth: () => Promise<AsyncIterator<Int>>;
}

export interface ThingSubscriptionPayload {
  mutation: MutationType;
  node: Thing;
  updatedFields: String[];
  previousValues: ThingPreviousValues;
}

export interface ThingSubscriptionPayloadPromise
  extends Promise<ThingSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ThingPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ThingPreviousValuesPromise>() => T;
}

export interface ThingSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ThingSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ThingSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ThingPreviousValuesSubscription>() => T;
}

export interface ThingPreviousValues {
  id: ID_Output;
  name: String;
}

export interface ThingPreviousValuesPromise
  extends Promise<ThingPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface ThingPreviousValuesSubscription
  extends Promise<AsyncIterator<ThingPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Place",
    embedded: false
  },
  {
    name: "Thing",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `http://localhost:4466`
});
export const prisma = new Prisma();
