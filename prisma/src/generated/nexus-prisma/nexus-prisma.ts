/**
 * This file was automatically generated by nexus-prisma@0.3.5
 * Do not make changes to this file directly
 */

import { core } from 'nexus'
import { GraphQLResolveInfo } from 'graphql'
import * as prisma from '../prisma-client'

declare global {
  interface NexusPrismaGen extends NexusPrismaTypes {}
}

export interface NexusPrismaTypes {
  objectTypes: {
    fields: {
      Query: QueryObject
      Place: PlaceObject
      Thing: ThingObject
      PlaceConnection: PlaceConnectionObject
      PageInfo: PageInfoObject
      PlaceEdge: PlaceEdgeObject
      AggregatePlace: AggregatePlaceObject
      ThingConnection: ThingConnectionObject
      ThingEdge: ThingEdgeObject
      AggregateThing: AggregateThingObject
      Mutation: MutationObject
      BatchPayload: BatchPayloadObject
      Subscription: SubscriptionObject
      PlaceSubscriptionPayload: PlaceSubscriptionPayloadObject
      PlacePreviousValues: PlacePreviousValuesObject
      ThingSubscriptionPayload: ThingSubscriptionPayloadObject
      ThingPreviousValues: ThingPreviousValuesObject
    }
    fieldsDetails: {
      Query: QueryFieldDetails
      Place: PlaceFieldDetails
      Thing: ThingFieldDetails
      PlaceConnection: PlaceConnectionFieldDetails
      PageInfo: PageInfoFieldDetails
      PlaceEdge: PlaceEdgeFieldDetails
      AggregatePlace: AggregatePlaceFieldDetails
      ThingConnection: ThingConnectionFieldDetails
      ThingEdge: ThingEdgeFieldDetails
      AggregateThing: AggregateThingFieldDetails
      Mutation: MutationFieldDetails
      BatchPayload: BatchPayloadFieldDetails
      Subscription: SubscriptionFieldDetails
      PlaceSubscriptionPayload: PlaceSubscriptionPayloadFieldDetails
      PlacePreviousValues: PlacePreviousValuesFieldDetails
      ThingSubscriptionPayload: ThingSubscriptionPayloadFieldDetails
      ThingPreviousValues: ThingPreviousValuesFieldDetails
    }
  }
  inputTypes: {
    fields: {
      PlaceWhereUniqueInput: PlaceWhereUniqueInputInputObject
      ThingWhereInput: ThingWhereInputInputObject
      PlaceWhereInput: PlaceWhereInputInputObject
      ThingWhereUniqueInput: ThingWhereUniqueInputInputObject
      PlaceCreateInput: PlaceCreateInputInputObject
      ThingCreateManyWithoutPlaceInput: ThingCreateManyWithoutPlaceInputInputObject
      ThingCreateWithoutPlaceInput: ThingCreateWithoutPlaceInputInputObject
      PlaceCreateManyWithoutParentPlaceInput: PlaceCreateManyWithoutParentPlaceInputInputObject
      PlaceCreateWithoutParentPlaceInput: PlaceCreateWithoutParentPlaceInputInputObject
      PlaceCreateOneWithoutSubPlacesInput: PlaceCreateOneWithoutSubPlacesInputInputObject
      PlaceCreateWithoutSubPlacesInput: PlaceCreateWithoutSubPlacesInputInputObject
      PlaceUpdateInput: PlaceUpdateInputInputObject
      ThingUpdateManyWithoutPlaceInput: ThingUpdateManyWithoutPlaceInputInputObject
      ThingUpdateWithWhereUniqueWithoutPlaceInput: ThingUpdateWithWhereUniqueWithoutPlaceInputInputObject
      ThingUpdateWithoutPlaceDataInput: ThingUpdateWithoutPlaceDataInputInputObject
      ThingUpsertWithWhereUniqueWithoutPlaceInput: ThingUpsertWithWhereUniqueWithoutPlaceInputInputObject
      ThingScalarWhereInput: ThingScalarWhereInputInputObject
      ThingUpdateManyWithWhereNestedInput: ThingUpdateManyWithWhereNestedInputInputObject
      ThingUpdateManyDataInput: ThingUpdateManyDataInputInputObject
      PlaceUpdateManyWithoutParentPlaceInput: PlaceUpdateManyWithoutParentPlaceInputInputObject
      PlaceUpdateWithWhereUniqueWithoutParentPlaceInput: PlaceUpdateWithWhereUniqueWithoutParentPlaceInputInputObject
      PlaceUpdateWithoutParentPlaceDataInput: PlaceUpdateWithoutParentPlaceDataInputInputObject
      PlaceUpsertWithWhereUniqueWithoutParentPlaceInput: PlaceUpsertWithWhereUniqueWithoutParentPlaceInputInputObject
      PlaceScalarWhereInput: PlaceScalarWhereInputInputObject
      PlaceUpdateManyWithWhereNestedInput: PlaceUpdateManyWithWhereNestedInputInputObject
      PlaceUpdateManyDataInput: PlaceUpdateManyDataInputInputObject
      PlaceUpdateOneWithoutSubPlacesInput: PlaceUpdateOneWithoutSubPlacesInputInputObject
      PlaceUpdateWithoutSubPlacesDataInput: PlaceUpdateWithoutSubPlacesDataInputInputObject
      PlaceUpsertWithoutSubPlacesInput: PlaceUpsertWithoutSubPlacesInputInputObject
      PlaceUpdateManyMutationInput: PlaceUpdateManyMutationInputInputObject
      ThingCreateInput: ThingCreateInputInputObject
      PlaceCreateOneWithoutThingsInput: PlaceCreateOneWithoutThingsInputInputObject
      PlaceCreateWithoutThingsInput: PlaceCreateWithoutThingsInputInputObject
      ThingUpdateInput: ThingUpdateInputInputObject
      PlaceUpdateOneRequiredWithoutThingsInput: PlaceUpdateOneRequiredWithoutThingsInputInputObject
      PlaceUpdateWithoutThingsDataInput: PlaceUpdateWithoutThingsDataInputInputObject
      PlaceUpsertWithoutThingsInput: PlaceUpsertWithoutThingsInputInputObject
      ThingUpdateManyMutationInput: ThingUpdateManyMutationInputInputObject
      PlaceSubscriptionWhereInput: PlaceSubscriptionWhereInputInputObject
      ThingSubscriptionWhereInput: ThingSubscriptionWhereInputInputObject
    }
  }
  enumTypes: {
    ThingOrderByInput: ThingOrderByInputValues,
    PlaceOrderByInput: PlaceOrderByInputValues,
    MutationType: MutationTypeValues,
  }
}

// Types for Query

type QueryObject =
  | QueryFields
  | { name: 'place', args?: QueryPlaceArgs[] | false, alias?: string  } 
  | { name: 'places', args?: QueryPlacesArgs[] | false, alias?: string  } 
  | { name: 'placesConnection', args?: QueryPlacesConnectionArgs[] | false, alias?: string  } 
  | { name: 'thing', args?: QueryThingArgs[] | false, alias?: string  } 
  | { name: 'things', args?: QueryThingsArgs[] | false, alias?: string  } 
  | { name: 'thingsConnection', args?: QueryThingsConnectionArgs[] | false, alias?: string  } 

type QueryFields =
  | 'place'
  | 'places'
  | 'placesConnection'
  | 'thing'
  | 'things'
  | 'thingsConnection'


type QueryPlaceArgs =
  | 'where'
type QueryPlacesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryPlacesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryThingArgs =
  | 'where'
type QueryThingsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryThingsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface QueryFieldDetails {
  place: {
    type: 'Place'
    args: Record<QueryPlaceArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: PlaceWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Place | null> | prisma.Place | null
  }
  places: {
    type: 'Place'
    args: Record<QueryPlacesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: PlaceWhereInput | null, orderBy?: prisma.PlaceOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Place[]> | prisma.Place[]
  }
  placesConnection: {
    type: 'PlaceConnection'
    args: Record<QueryPlacesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: PlaceWhereInput | null, orderBy?: prisma.PlaceOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PlaceConnection> | prisma.PlaceConnection
  }
  thing: {
    type: 'Thing'
    args: Record<QueryThingArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: ThingWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Thing | null> | prisma.Thing | null
  }
  things: {
    type: 'Thing'
    args: Record<QueryThingsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ThingWhereInput | null, orderBy?: prisma.ThingOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Thing[]> | prisma.Thing[]
  }
  thingsConnection: {
    type: 'ThingConnection'
    args: Record<QueryThingsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ThingWhereInput | null, orderBy?: prisma.ThingOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ThingConnection> | prisma.ThingConnection
  }
}
  

// Types for Place

type PlaceObject =
  | PlaceFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'things', args?: PlaceThingsArgs[] | false, alias?: string  } 
  | { name: 'subPlaces', args?: PlaceSubPlacesArgs[] | false, alias?: string  } 
  | { name: 'depth', args?: [] | false, alias?: string  } 
  | { name: 'parentPlace', args?: [] | false, alias?: string  } 

type PlaceFields =
  | 'id'
  | 'name'
  | 'things'
  | 'subPlaces'
  | 'depth'
  | 'parentPlace'


type PlaceThingsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type PlaceSubPlacesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface PlaceFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  things: {
    type: 'Thing'
    args: Record<PlaceThingsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Place">,
      args: { where?: ThingWhereInput | null, orderBy?: prisma.ThingOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Thing[]> | prisma.Thing[]
  }
  subPlaces: {
    type: 'Place'
    args: Record<PlaceSubPlacesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Place">,
      args: { where?: PlaceWhereInput | null, orderBy?: prisma.PlaceOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Place[]> | prisma.Place[]
  }
  depth: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  parentPlace: {
    type: 'Place'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Place">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Place | null> | prisma.Place | null
  }
}
  

// Types for Thing

type ThingObject =
  | ThingFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'place', args?: [] | false, alias?: string  } 

type ThingFields =
  | 'id'
  | 'name'
  | 'place'



  

export interface ThingFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  place: {
    type: 'Place'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Thing">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Place> | prisma.Place
  }
}
  

// Types for PlaceConnection

type PlaceConnectionObject =
  | PlaceConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type PlaceConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface PlaceConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PlaceConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'PlaceEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"PlaceConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PlaceEdge[]> | prisma.PlaceEdge[]
  }
  aggregate: {
    type: 'AggregatePlace'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PlaceConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregatePlace> | prisma.AggregatePlace
  }
}
  

// Types for PageInfo

type PageInfoObject =
  | PageInfoFields
  | { name: 'hasNextPage', args?: [] | false, alias?: string  } 
  | { name: 'hasPreviousPage', args?: [] | false, alias?: string  } 
  | { name: 'startCursor', args?: [] | false, alias?: string  } 
  | { name: 'endCursor', args?: [] | false, alias?: string  } 

type PageInfoFields =
  | 'hasNextPage'
  | 'hasPreviousPage'
  | 'startCursor'
  | 'endCursor'



  

export interface PageInfoFieldDetails {
  hasNextPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  hasPreviousPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  startCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  endCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for PlaceEdge

type PlaceEdgeObject =
  | PlaceEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type PlaceEdgeFields =
  | 'node'
  | 'cursor'



  

export interface PlaceEdgeFieldDetails {
  node: {
    type: 'Place'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PlaceEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Place> | prisma.Place
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregatePlace

type AggregatePlaceObject =
  | AggregatePlaceFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregatePlaceFields =
  | 'count'



  

export interface AggregatePlaceFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ThingConnection

type ThingConnectionObject =
  | ThingConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type ThingConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface ThingConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ThingConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'ThingEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"ThingConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ThingEdge[]> | prisma.ThingEdge[]
  }
  aggregate: {
    type: 'AggregateThing'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ThingConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateThing> | prisma.AggregateThing
  }
}
  

// Types for ThingEdge

type ThingEdgeObject =
  | ThingEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type ThingEdgeFields =
  | 'node'
  | 'cursor'



  

export interface ThingEdgeFieldDetails {
  node: {
    type: 'Thing'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ThingEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Thing> | prisma.Thing
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateThing

type AggregateThingObject =
  | AggregateThingFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateThingFields =
  | 'count'



  

export interface AggregateThingFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Mutation

type MutationObject =
  | MutationFields
  | { name: 'createPlace', args?: MutationCreatePlaceArgs[] | false, alias?: string  } 
  | { name: 'updatePlace', args?: MutationUpdatePlaceArgs[] | false, alias?: string  } 
  | { name: 'updateManyPlaces', args?: MutationUpdateManyPlacesArgs[] | false, alias?: string  } 
  | { name: 'upsertPlace', args?: MutationUpsertPlaceArgs[] | false, alias?: string  } 
  | { name: 'deletePlace', args?: MutationDeletePlaceArgs[] | false, alias?: string  } 
  | { name: 'deleteManyPlaces', args?: MutationDeleteManyPlacesArgs[] | false, alias?: string  } 
  | { name: 'createThing', args?: MutationCreateThingArgs[] | false, alias?: string  } 
  | { name: 'updateThing', args?: MutationUpdateThingArgs[] | false, alias?: string  } 
  | { name: 'updateManyThings', args?: MutationUpdateManyThingsArgs[] | false, alias?: string  } 
  | { name: 'upsertThing', args?: MutationUpsertThingArgs[] | false, alias?: string  } 
  | { name: 'deleteThing', args?: MutationDeleteThingArgs[] | false, alias?: string  } 
  | { name: 'deleteManyThings', args?: MutationDeleteManyThingsArgs[] | false, alias?: string  } 

type MutationFields =
  | 'createPlace'
  | 'updatePlace'
  | 'updateManyPlaces'
  | 'upsertPlace'
  | 'deletePlace'
  | 'deleteManyPlaces'
  | 'createThing'
  | 'updateThing'
  | 'updateManyThings'
  | 'upsertThing'
  | 'deleteThing'
  | 'deleteManyThings'


type MutationCreatePlaceArgs =
  | 'data'
type MutationUpdatePlaceArgs =
  | 'data'
  | 'where'
type MutationUpdateManyPlacesArgs =
  | 'data'
  | 'where'
type MutationUpsertPlaceArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeletePlaceArgs =
  | 'where'
type MutationDeleteManyPlacesArgs =
  | 'where'
type MutationCreateThingArgs =
  | 'data'
type MutationUpdateThingArgs =
  | 'data'
  | 'where'
type MutationUpdateManyThingsArgs =
  | 'data'
  | 'where'
type MutationUpsertThingArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteThingArgs =
  | 'where'
type MutationDeleteManyThingsArgs =
  | 'where'
  

export interface MutationFieldDetails {
  createPlace: {
    type: 'Place'
    args: Record<MutationCreatePlaceArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PlaceCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Place> | prisma.Place
  }
  updatePlace: {
    type: 'Place'
    args: Record<MutationUpdatePlaceArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PlaceUpdateInput, where: PlaceWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Place | null> | prisma.Place | null
  }
  updateManyPlaces: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyPlacesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PlaceUpdateManyMutationInput, where?: PlaceWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertPlace: {
    type: 'Place'
    args: Record<MutationUpsertPlaceArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: PlaceWhereUniqueInput, create: PlaceCreateInput, update: PlaceUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Place> | prisma.Place
  }
  deletePlace: {
    type: 'Place'
    args: Record<MutationDeletePlaceArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: PlaceWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Place | null> | prisma.Place | null
  }
  deleteManyPlaces: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyPlacesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: PlaceWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createThing: {
    type: 'Thing'
    args: Record<MutationCreateThingArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ThingCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Thing> | prisma.Thing
  }
  updateThing: {
    type: 'Thing'
    args: Record<MutationUpdateThingArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ThingUpdateInput, where: ThingWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Thing | null> | prisma.Thing | null
  }
  updateManyThings: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyThingsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ThingUpdateManyMutationInput, where?: ThingWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertThing: {
    type: 'Thing'
    args: Record<MutationUpsertThingArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ThingWhereUniqueInput, create: ThingCreateInput, update: ThingUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Thing> | prisma.Thing
  }
  deleteThing: {
    type: 'Thing'
    args: Record<MutationDeleteThingArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ThingWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Thing | null> | prisma.Thing | null
  }
  deleteManyThings: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyThingsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: ThingWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
}
  

// Types for BatchPayload

type BatchPayloadObject =
  | BatchPayloadFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type BatchPayloadFields =
  | 'count'



  

export interface BatchPayloadFieldDetails {
  count: {
    type: 'Long'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Subscription

type SubscriptionObject =
  | SubscriptionFields
  | { name: 'place', args?: SubscriptionPlaceArgs[] | false, alias?: string  } 
  | { name: 'thing', args?: SubscriptionThingArgs[] | false, alias?: string  } 

type SubscriptionFields =
  | 'place'
  | 'thing'


type SubscriptionPlaceArgs =
  | 'where'
type SubscriptionThingArgs =
  | 'where'
  

export interface SubscriptionFieldDetails {
  place: {
    type: 'PlaceSubscriptionPayload'
    args: Record<SubscriptionPlaceArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: PlaceSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PlaceSubscriptionPayload | null> | prisma.PlaceSubscriptionPayload | null
  }
  thing: {
    type: 'ThingSubscriptionPayload'
    args: Record<SubscriptionThingArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: ThingSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ThingSubscriptionPayload | null> | prisma.ThingSubscriptionPayload | null
  }
}
  

// Types for PlaceSubscriptionPayload

type PlaceSubscriptionPayloadObject =
  | PlaceSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type PlaceSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface PlaceSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PlaceSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Place'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"PlaceSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Place | null> | prisma.Place | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'PlacePreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"PlaceSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PlacePreviousValues | null> | prisma.PlacePreviousValues | null
  }
}
  

// Types for PlacePreviousValues

type PlacePreviousValuesObject =
  | PlacePreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'depth', args?: [] | false, alias?: string  } 

type PlacePreviousValuesFields =
  | 'id'
  | 'name'
  | 'depth'



  

export interface PlacePreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  depth: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ThingSubscriptionPayload

type ThingSubscriptionPayloadObject =
  | ThingSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type ThingSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface ThingSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ThingSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Thing'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ThingSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Thing | null> | prisma.Thing | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'ThingPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ThingSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ThingPreviousValues | null> | prisma.ThingPreviousValues | null
  }
}
  

// Types for ThingPreviousValues

type ThingPreviousValuesObject =
  | ThingPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 

type ThingPreviousValuesFields =
  | 'id'
  | 'name'



  

export interface ThingPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  


export interface PlaceWhereUniqueInput {
  id?: string | null
}
export type PlaceWhereUniqueInputInputObject =
  | Extract<keyof PlaceWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface ThingWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  place?: PlaceWhereInput | null
  AND?: ThingWhereInput[]
  OR?: ThingWhereInput[]
  NOT?: ThingWhereInput[]
}
export type ThingWhereInputInputObject =
  | Extract<keyof ThingWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'place', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface PlaceWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  things_every?: ThingWhereInput | null
  things_some?: ThingWhereInput | null
  things_none?: ThingWhereInput | null
  subPlaces_every?: PlaceWhereInput | null
  subPlaces_some?: PlaceWhereInput | null
  subPlaces_none?: PlaceWhereInput | null
  depth?: number | null
  depth_not?: number | null
  depth_in?: number[]
  depth_not_in?: number[]
  depth_lt?: number | null
  depth_lte?: number | null
  depth_gt?: number | null
  depth_gte?: number | null
  parentPlace?: PlaceWhereInput | null
  AND?: PlaceWhereInput[]
  OR?: PlaceWhereInput[]
  NOT?: PlaceWhereInput[]
}
export type PlaceWhereInputInputObject =
  | Extract<keyof PlaceWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'things_every', alias?: string  } 
  | { name: 'things_some', alias?: string  } 
  | { name: 'things_none', alias?: string  } 
  | { name: 'subPlaces_every', alias?: string  } 
  | { name: 'subPlaces_some', alias?: string  } 
  | { name: 'subPlaces_none', alias?: string  } 
  | { name: 'depth', alias?: string  } 
  | { name: 'depth_not', alias?: string  } 
  | { name: 'depth_in', alias?: string  } 
  | { name: 'depth_not_in', alias?: string  } 
  | { name: 'depth_lt', alias?: string  } 
  | { name: 'depth_lte', alias?: string  } 
  | { name: 'depth_gt', alias?: string  } 
  | { name: 'depth_gte', alias?: string  } 
  | { name: 'parentPlace', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ThingWhereUniqueInput {
  id?: string | null
}
export type ThingWhereUniqueInputInputObject =
  | Extract<keyof ThingWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface PlaceCreateInput {
  name?: string
  things?: ThingCreateManyWithoutPlaceInput | null
  subPlaces?: PlaceCreateManyWithoutParentPlaceInput | null
  depth?: number
  parentPlace?: PlaceCreateOneWithoutSubPlacesInput | null
}
export type PlaceCreateInputInputObject =
  | Extract<keyof PlaceCreateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'things', alias?: string  } 
  | { name: 'subPlaces', alias?: string  } 
  | { name: 'depth', alias?: string  } 
  | { name: 'parentPlace', alias?: string  } 
  
export interface ThingCreateManyWithoutPlaceInput {
  create?: ThingCreateWithoutPlaceInput[]
  connect?: ThingWhereUniqueInput[]
}
export type ThingCreateManyWithoutPlaceInputInputObject =
  | Extract<keyof ThingCreateManyWithoutPlaceInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ThingCreateWithoutPlaceInput {
  name?: string
}
export type ThingCreateWithoutPlaceInputInputObject =
  | Extract<keyof ThingCreateWithoutPlaceInput, string>
  | { name: 'name', alias?: string  } 
  
export interface PlaceCreateManyWithoutParentPlaceInput {
  create?: PlaceCreateWithoutParentPlaceInput[]
  connect?: PlaceWhereUniqueInput[]
}
export type PlaceCreateManyWithoutParentPlaceInputInputObject =
  | Extract<keyof PlaceCreateManyWithoutParentPlaceInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface PlaceCreateWithoutParentPlaceInput {
  name?: string
  things?: ThingCreateManyWithoutPlaceInput | null
  subPlaces?: PlaceCreateManyWithoutParentPlaceInput | null
  depth?: number
}
export type PlaceCreateWithoutParentPlaceInputInputObject =
  | Extract<keyof PlaceCreateWithoutParentPlaceInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'things', alias?: string  } 
  | { name: 'subPlaces', alias?: string  } 
  | { name: 'depth', alias?: string  } 
  
export interface PlaceCreateOneWithoutSubPlacesInput {
  create?: PlaceCreateWithoutSubPlacesInput | null
  connect?: PlaceWhereUniqueInput | null
}
export type PlaceCreateOneWithoutSubPlacesInputInputObject =
  | Extract<keyof PlaceCreateOneWithoutSubPlacesInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface PlaceCreateWithoutSubPlacesInput {
  name?: string
  things?: ThingCreateManyWithoutPlaceInput | null
  depth?: number
  parentPlace?: PlaceCreateOneWithoutSubPlacesInput | null
}
export type PlaceCreateWithoutSubPlacesInputInputObject =
  | Extract<keyof PlaceCreateWithoutSubPlacesInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'things', alias?: string  } 
  | { name: 'depth', alias?: string  } 
  | { name: 'parentPlace', alias?: string  } 
  
export interface PlaceUpdateInput {
  name?: string | null
  things?: ThingUpdateManyWithoutPlaceInput | null
  subPlaces?: PlaceUpdateManyWithoutParentPlaceInput | null
  depth?: number | null
  parentPlace?: PlaceUpdateOneWithoutSubPlacesInput | null
}
export type PlaceUpdateInputInputObject =
  | Extract<keyof PlaceUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'things', alias?: string  } 
  | { name: 'subPlaces', alias?: string  } 
  | { name: 'depth', alias?: string  } 
  | { name: 'parentPlace', alias?: string  } 
  
export interface ThingUpdateManyWithoutPlaceInput {
  create?: ThingCreateWithoutPlaceInput[]
  delete?: ThingWhereUniqueInput[]
  connect?: ThingWhereUniqueInput[]
  set?: ThingWhereUniqueInput[]
  disconnect?: ThingWhereUniqueInput[]
  update?: ThingUpdateWithWhereUniqueWithoutPlaceInput[]
  upsert?: ThingUpsertWithWhereUniqueWithoutPlaceInput[]
  deleteMany?: ThingScalarWhereInput[]
  updateMany?: ThingUpdateManyWithWhereNestedInput[]
}
export type ThingUpdateManyWithoutPlaceInputInputObject =
  | Extract<keyof ThingUpdateManyWithoutPlaceInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface ThingUpdateWithWhereUniqueWithoutPlaceInput {
  where?: ThingWhereUniqueInput
  data?: ThingUpdateWithoutPlaceDataInput
}
export type ThingUpdateWithWhereUniqueWithoutPlaceInputInputObject =
  | Extract<keyof ThingUpdateWithWhereUniqueWithoutPlaceInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface ThingUpdateWithoutPlaceDataInput {
  name?: string | null
}
export type ThingUpdateWithoutPlaceDataInputInputObject =
  | Extract<keyof ThingUpdateWithoutPlaceDataInput, string>
  | { name: 'name', alias?: string  } 
  
export interface ThingUpsertWithWhereUniqueWithoutPlaceInput {
  where?: ThingWhereUniqueInput
  update?: ThingUpdateWithoutPlaceDataInput
  create?: ThingCreateWithoutPlaceInput
}
export type ThingUpsertWithWhereUniqueWithoutPlaceInputInputObject =
  | Extract<keyof ThingUpsertWithWhereUniqueWithoutPlaceInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface ThingScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  AND?: ThingScalarWhereInput[]
  OR?: ThingScalarWhereInput[]
  NOT?: ThingScalarWhereInput[]
}
export type ThingScalarWhereInputInputObject =
  | Extract<keyof ThingScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ThingUpdateManyWithWhereNestedInput {
  where?: ThingScalarWhereInput
  data?: ThingUpdateManyDataInput
}
export type ThingUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof ThingUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface ThingUpdateManyDataInput {
  name?: string | null
}
export type ThingUpdateManyDataInputInputObject =
  | Extract<keyof ThingUpdateManyDataInput, string>
  | { name: 'name', alias?: string  } 
  
export interface PlaceUpdateManyWithoutParentPlaceInput {
  create?: PlaceCreateWithoutParentPlaceInput[]
  delete?: PlaceWhereUniqueInput[]
  connect?: PlaceWhereUniqueInput[]
  set?: PlaceWhereUniqueInput[]
  disconnect?: PlaceWhereUniqueInput[]
  update?: PlaceUpdateWithWhereUniqueWithoutParentPlaceInput[]
  upsert?: PlaceUpsertWithWhereUniqueWithoutParentPlaceInput[]
  deleteMany?: PlaceScalarWhereInput[]
  updateMany?: PlaceUpdateManyWithWhereNestedInput[]
}
export type PlaceUpdateManyWithoutParentPlaceInputInputObject =
  | Extract<keyof PlaceUpdateManyWithoutParentPlaceInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface PlaceUpdateWithWhereUniqueWithoutParentPlaceInput {
  where?: PlaceWhereUniqueInput
  data?: PlaceUpdateWithoutParentPlaceDataInput
}
export type PlaceUpdateWithWhereUniqueWithoutParentPlaceInputInputObject =
  | Extract<keyof PlaceUpdateWithWhereUniqueWithoutParentPlaceInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface PlaceUpdateWithoutParentPlaceDataInput {
  name?: string | null
  things?: ThingUpdateManyWithoutPlaceInput | null
  subPlaces?: PlaceUpdateManyWithoutParentPlaceInput | null
  depth?: number | null
}
export type PlaceUpdateWithoutParentPlaceDataInputInputObject =
  | Extract<keyof PlaceUpdateWithoutParentPlaceDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'things', alias?: string  } 
  | { name: 'subPlaces', alias?: string  } 
  | { name: 'depth', alias?: string  } 
  
export interface PlaceUpsertWithWhereUniqueWithoutParentPlaceInput {
  where?: PlaceWhereUniqueInput
  update?: PlaceUpdateWithoutParentPlaceDataInput
  create?: PlaceCreateWithoutParentPlaceInput
}
export type PlaceUpsertWithWhereUniqueWithoutParentPlaceInputInputObject =
  | Extract<keyof PlaceUpsertWithWhereUniqueWithoutParentPlaceInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface PlaceScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  depth?: number | null
  depth_not?: number | null
  depth_in?: number[]
  depth_not_in?: number[]
  depth_lt?: number | null
  depth_lte?: number | null
  depth_gt?: number | null
  depth_gte?: number | null
  AND?: PlaceScalarWhereInput[]
  OR?: PlaceScalarWhereInput[]
  NOT?: PlaceScalarWhereInput[]
}
export type PlaceScalarWhereInputInputObject =
  | Extract<keyof PlaceScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'depth', alias?: string  } 
  | { name: 'depth_not', alias?: string  } 
  | { name: 'depth_in', alias?: string  } 
  | { name: 'depth_not_in', alias?: string  } 
  | { name: 'depth_lt', alias?: string  } 
  | { name: 'depth_lte', alias?: string  } 
  | { name: 'depth_gt', alias?: string  } 
  | { name: 'depth_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface PlaceUpdateManyWithWhereNestedInput {
  where?: PlaceScalarWhereInput
  data?: PlaceUpdateManyDataInput
}
export type PlaceUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof PlaceUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface PlaceUpdateManyDataInput {
  name?: string | null
  depth?: number | null
}
export type PlaceUpdateManyDataInputInputObject =
  | Extract<keyof PlaceUpdateManyDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'depth', alias?: string  } 
  
export interface PlaceUpdateOneWithoutSubPlacesInput {
  create?: PlaceCreateWithoutSubPlacesInput | null
  update?: PlaceUpdateWithoutSubPlacesDataInput | null
  upsert?: PlaceUpsertWithoutSubPlacesInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: PlaceWhereUniqueInput | null
}
export type PlaceUpdateOneWithoutSubPlacesInputInputObject =
  | Extract<keyof PlaceUpdateOneWithoutSubPlacesInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface PlaceUpdateWithoutSubPlacesDataInput {
  name?: string | null
  things?: ThingUpdateManyWithoutPlaceInput | null
  depth?: number | null
  parentPlace?: PlaceUpdateOneWithoutSubPlacesInput | null
}
export type PlaceUpdateWithoutSubPlacesDataInputInputObject =
  | Extract<keyof PlaceUpdateWithoutSubPlacesDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'things', alias?: string  } 
  | { name: 'depth', alias?: string  } 
  | { name: 'parentPlace', alias?: string  } 
  
export interface PlaceUpsertWithoutSubPlacesInput {
  update?: PlaceUpdateWithoutSubPlacesDataInput
  create?: PlaceCreateWithoutSubPlacesInput
}
export type PlaceUpsertWithoutSubPlacesInputInputObject =
  | Extract<keyof PlaceUpsertWithoutSubPlacesInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface PlaceUpdateManyMutationInput {
  name?: string | null
  depth?: number | null
}
export type PlaceUpdateManyMutationInputInputObject =
  | Extract<keyof PlaceUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'depth', alias?: string  } 
  
export interface ThingCreateInput {
  name?: string
  place?: PlaceCreateOneWithoutThingsInput
}
export type ThingCreateInputInputObject =
  | Extract<keyof ThingCreateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'place', alias?: string  } 
  
export interface PlaceCreateOneWithoutThingsInput {
  create?: PlaceCreateWithoutThingsInput | null
  connect?: PlaceWhereUniqueInput | null
}
export type PlaceCreateOneWithoutThingsInputInputObject =
  | Extract<keyof PlaceCreateOneWithoutThingsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface PlaceCreateWithoutThingsInput {
  name?: string
  subPlaces?: PlaceCreateManyWithoutParentPlaceInput | null
  depth?: number
  parentPlace?: PlaceCreateOneWithoutSubPlacesInput | null
}
export type PlaceCreateWithoutThingsInputInputObject =
  | Extract<keyof PlaceCreateWithoutThingsInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'subPlaces', alias?: string  } 
  | { name: 'depth', alias?: string  } 
  | { name: 'parentPlace', alias?: string  } 
  
export interface ThingUpdateInput {
  name?: string | null
  place?: PlaceUpdateOneRequiredWithoutThingsInput | null
}
export type ThingUpdateInputInputObject =
  | Extract<keyof ThingUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'place', alias?: string  } 
  
export interface PlaceUpdateOneRequiredWithoutThingsInput {
  create?: PlaceCreateWithoutThingsInput | null
  update?: PlaceUpdateWithoutThingsDataInput | null
  upsert?: PlaceUpsertWithoutThingsInput | null
  connect?: PlaceWhereUniqueInput | null
}
export type PlaceUpdateOneRequiredWithoutThingsInputInputObject =
  | Extract<keyof PlaceUpdateOneRequiredWithoutThingsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface PlaceUpdateWithoutThingsDataInput {
  name?: string | null
  subPlaces?: PlaceUpdateManyWithoutParentPlaceInput | null
  depth?: number | null
  parentPlace?: PlaceUpdateOneWithoutSubPlacesInput | null
}
export type PlaceUpdateWithoutThingsDataInputInputObject =
  | Extract<keyof PlaceUpdateWithoutThingsDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'subPlaces', alias?: string  } 
  | { name: 'depth', alias?: string  } 
  | { name: 'parentPlace', alias?: string  } 
  
export interface PlaceUpsertWithoutThingsInput {
  update?: PlaceUpdateWithoutThingsDataInput
  create?: PlaceCreateWithoutThingsInput
}
export type PlaceUpsertWithoutThingsInputInputObject =
  | Extract<keyof PlaceUpsertWithoutThingsInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface ThingUpdateManyMutationInput {
  name?: string | null
}
export type ThingUpdateManyMutationInputInputObject =
  | Extract<keyof ThingUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  
export interface PlaceSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: PlaceWhereInput | null
  AND?: PlaceSubscriptionWhereInput[]
  OR?: PlaceSubscriptionWhereInput[]
  NOT?: PlaceSubscriptionWhereInput[]
}
export type PlaceSubscriptionWhereInputInputObject =
  | Extract<keyof PlaceSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ThingSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: ThingWhereInput | null
  AND?: ThingSubscriptionWhereInput[]
  OR?: ThingSubscriptionWhereInput[]
  NOT?: ThingSubscriptionWhereInput[]
}
export type ThingSubscriptionWhereInputInputObject =
  | Extract<keyof ThingSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  

export type ThingOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type PlaceOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'depth_ASC'
  | 'depth_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type MutationTypeValues =
  | 'CREATED'
  | 'UPDATED'
  | 'DELETED'
  
  